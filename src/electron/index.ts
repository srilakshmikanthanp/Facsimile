// Copyright (c) 2022 Sri Lakshmi Kanthan P
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

import { app, BrowserWindow, globalShortcut, Menu, MenuItem } from 'electron';
import { APP_SHORTCUT_KEY } from './constants';
import { createMainWindow } from "./windows";
import { installDevTools } from "./functions";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

// Main Window Preload Entry
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Main Window Load entry
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Main Window is created on app.on('ready')
let mainFrame: BrowserWindow | null = null;

// get the lock to chen single instance
if (!app.requestSingleInstanceLock()) {
  app.quit();
}

//  stop your app launching at install
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Add app to system startup
app.setLoginItemSettings({
  openAtLogin: app.isPackaged,
  openAsHidden: true,
  path: app.getPath("exe")
});


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // register key to toggle main window visibility
  globalShortcut.register(APP_SHORTCUT_KEY, () => {
    if (mainFrame && mainFrame.isVisible()) {
      mainFrame.hide();
    } else if (mainFrame) {
      mainFrame.show();
    }
  });

  // create the main window.
  mainFrame = createMainWindow(
    MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    MAIN_WINDOW_WEBPACK_ENTRY,
  );

  // install dev tools
  if (!app.isPackaged) {
    installDevTools();
  }

  // Create Non visible Menu 
  const menu = new Menu();

  // Add ESC to close the app
  menu.append(new MenuItem({
    label: 'Hide Facsimile',
    visible: false,
    accelerator: 'Esc',
    click: () => {
      if (mainFrame && mainFrame.isVisible()) {
        mainFrame.hide();
      }
    }
  }));

  // Add for dev tools
  menu.append(new MenuItem({
    label: "Open Dev Tools",
    visible: false,
    accelerator: "Control+D",
    click: () => {
      if (mainFrame && mainFrame.isVisible()) {
        mainFrame.webContents.openDevTools();
      }
    }
  }));

  // Add for Quit
  menu.append(new MenuItem({
    label: "Quit",
    visible: false,
    accelerator: "Control+Q",
    click: () => {
      app.quit();
    }
  }));

  // set the menu
  Menu.setApplicationMenu(menu);
});

// Close the window when the application is Lost Focus.
app.on('browser-window-blur', (event, window) => {
  if (!window.webContents.isDevToolsOpened()) {
    window.hide()
  }
});
